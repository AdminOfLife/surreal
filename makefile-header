#=============================================================================
# makefile-header: Global definitions for Unreal project.
#
# Makefiles must define UNREAL_DIR before including makefile-header.
#
# Revision history:
# 	* Created by Mike Danylchuk
#	* Updated to support multiple link type by Brandon Reinhart.
#=============================================================================

#-----------------------------------------------------------------------------
# Configuration.
#-----------------------------------------------------------------------------

# Specify version here.  Used for object storage directory.
VERSION			= 436

# Specify link method here.  Either [static] or [shared].
LINKSTYLE		= shared

# Target type.  Only [linux] for now.
TARGETTYPE		= linux

# Machine type.  Only [i386] for now
MACHTYPE		= i386

# Specify build here.  Either [release] or [debug].
# Make sure there isn't any trailing space on the line.
BUILD			= release

# Directory for temporary files
TMPDIR			= /tmp/surreal-build

#-----------------------------------------------------------------------------




SHELL = /bin/sh
BUILD_SUBDIR		= $(BUILD)-$(TARGETTYPE)-$(MACHTYPE)-$(LINKSTYLE)

# Release build.
ifeq ($(BUILD),release)
ifeq ($(TARGETTYPE),linux)
BUILD_CXXFLAGS = -O2 -Werror -fomit-frame-pointer -m386 -D_REENTRANT
endif
endif

# Debug build.
ifeq ($(BUILD),debug)
ifeq ($(TARGETTYPE),linux)
BUILD_CXXFLAGS = -O2 -Werror -m386 -D_REENTRANT -ggdb
endif
endif

# Shared build.
ifeq ($(LINKSTYLE),shared)
STATICLINK = 0
LIBSUFFIX  = so
endif

# Static build.
ifeq ($(LINKSTYLE),static)
STATICLINK = 1
LIBSUFFIX  = a
endif

#-----------------------------------------------------------------------------
# Directories.
#-----------------------------------------------------------------------------

# Core directories.
CORE_SRC		= $(UNREAL_DIR)/Core/Src
CORE_INC		= $(UNREAL_DIR)/Core/Inc
CORE_BUILD		= $(UNREAL_DIR)/Core/$(BUILD_SUBDIR)
CORE_OUT		= $(UNREAL_DIR)/System

# Engine directories.
ENGINE_SRC		= $(UNREAL_DIR)/Engine/Src
ENGINE_INC		= $(UNREAL_DIR)/Engine/Inc
ENGINE_BUILD		= $(UNREAL_DIR)/Engine/$(BUILD_SUBDIR)
ENGINE_OUT		= $(UNREAL_DIR)/System

# IpDrv directories.
IPDRV_SRC		= $(UNREAL_DIR)/HackedIpDrv/Src
IPDRV_INC		= $(UNREAL_DIR)/HackedIpDrv/Inc
IPDRV_BUILD		= $(UNREAL_DIR)/HackedIpDrv/$(BUILD_SUBDIR)
IPDRV_OUT		= $(UNREAL_DIR)/System

# Fire directories.
FIRE_SRC		= $(UNREAL_DIR)/Fire/Src
FIRE_INC		= $(UNREAL_DIR)/Fire/Inc
FIRE_BUILD		= $(UNREAL_DIR)/Fire/$(BUILD_SUBDIR)
FIRE_OUT		= $(UNREAL_DIR)/System

# Editor directories.
EDITOR_SRC		= $(UNREAL_DIR)/Editor/Src
EDITOR_INC		= $(UNREAL_DIR)/Editor/Inc
EDITOR_BUILD		= $(UNREAL_DIR)/Editor/$(BUILD_SUBDIR)
EDITOR_OUT		= $(UNREAL_DIR)/System

# UCC directories.
UCC_SRC			= $(UNREAL_DIR)/UCC/Src
UCC_INC			= $(UNREAL_DIR)/UCC/Inc
UCC_BUILD		= $(UNREAL_DIR)/UCC/$(BUILD_SUBDIR)
UCC_OUT			= $(UNREAL_DIR)/System

# MiniLaunch directories.
MINILAUNCH_SRC		= $(UNREAL_DIR)/MiniLaunch/Src
MINILAUNCH_INC		= $(UNREAL_DIR)/MiniLaunch/Inc
MINILAUNCH_BUILD	= $(UNREAL_DIR)/MiniLaunch/$(BUILD_SUBDIR)
MINILAUNCH_OUT		= $(UNREAL_DIR)/System

# SDLLaunch directories.
SDLLAUNCH_SRC		= $(UNREAL_DIR)/SDLLaunch/Src
SDLLAUNCH_INC		= $(UNREAL_DIR)/SDLLaunch/Inc
SDLLAUNCH_BUILD		= $(UNREAL_DIR)/SDLLaunch/$(BUILD_SUBDIR)
SDLLAUNCH_OUT		= $(UNREAL_DIR)/System

# Render directories.
RENDER_SRC		= $(UNREAL_DIR)/Render/Src
RENDER_INC		= $(UNREAL_DIR)/Render/Inc
RENDER_BUILD		= $(UNREAL_DIR)/Render/$(BUILD_SUBDIR)
RENDER_OUT		= $(UNREAL_DIR)/System

# OpenGLDrv directories.
OPENGLDRV_SRC		= $(UNREAL_DIR)/OpenGLDrv/Src
OPENGLDRV_INC		= $(UNREAL_DIR)/OpenGLDrv/Src
OPENGLDRV_BUILD		= $(UNREAL_DIR)/OpenGLDrv/$(BUILD_SUBDIR)
OPENGLDRV_OUT		= $(UNREAL_DIR)/System

# SDLDrv directories.
SDLDRV_SRC		= $(UNREAL_DIR)/SDLDrv/Src
SDLDRV_INC		= $(UNREAL_DIR)/SDLDrv/Inc
SDLDRV_BUILD		= $(UNREAL_DIR)/SDLDrv/$(BUILD_SUBDIR)
SDLDRV_OUT		= $(UNREAL_DIR)/System

# NullDrv directories.
NULLDRV_SRC		= $(UNREAL_DIR)/NullDrv/Src
NULLDRV_INC		= $(UNREAL_DIR)/NullDrv/Inc
NULLDRV_BUILD		= $(UNREAL_DIR)/NullDrv/$(BUILD_SUBDIR)
NULLDRV_OUT		= $(UNREAL_DIR)/System

# Unreal OpenAL audio subsystem directories.
ALAUDIO_SRC		= $(UNREAL_DIR)/ALAudio/Src
ALAUDIO_INC		= $(UNREAL_DIR)/ALAudio/Inc
ALAUDIO_BUILD	= $(UNREAL_DIR)/ALAudio/$(BUILD_SUBDIR)
ALAUDIO_OUT		= $(UNREAL_DIR)/System

# UWeb
UWEB_SRC		= $(UNREAL_DIR)/UWeb/Src
UWEB_INC		= $(UNREAL_DIR)/UWeb/Inc
UWEB_BUILD		= $(UNREAL_DIR)/UWeb/$(BUILD_SUBDIR)
UWEB_OUT		= $(UNREAL_DIR)/System

# Null Render
NULLRENDER_SRC		= $(UNREAL_DIR)/NullRender/Src
NULLRENDER_INC		= $(UNREAL_DIR)/NullRender/Inc
NULLRENDER_BUILD	= $(UNREAL_DIR)/NullRender/$(BUILD_SUBDIR)
NULLRENDER_OUT		= $(UNREAL_DIR)/System

# Null Net Driver
NULLNETDRIVER_SRC	= $(UNREAL_DIR)/NullNetDriver/Src
NULLNETDRIVER_INC	= $(UNREAL_DIR)/NullNetDriver/Inc
NULLNETDRIVER_BUILD	= $(UNREAL_DIR)/NullNetDriver/$(BUILD_SUBDIR)
NULLNETDRIVER_OUT	= $(UNREAL_DIR)/System


# Source directories.
ALL_SRC_DIRS 	= $(CORE_INC) $(CORE_SRC) \
		  $(ENGINE_INC) $(ENGINE_SRC) \
		  $(IPDRV_INC) $(IPDRV_SRC) \
		  $(FIRE_INC) $(FIRE_SRC) \
		  $(UCC_INC) $(UCC_SRC) \
		  $(RENDER_INC) $(RENDER_SRC) \
		  $(EDITOR_SRC) $(EDITOR_INC) \
		  $(OPENGLDRV_SRC) $(OPENGLDRV_INC) \
		  $(SDLDRV_SRC) $(SDLDRV_INC) \
		  $(MINILAUNCH_SRC) $(MINILAUNCH_INC) \
		  $(SDLLAUNCH_SRC) $(SDLLAUNCH_INC) \
		  $(ALAUDIO_SRC) $(ALAUDIO_INC) \
		  $(UWEB_SRC) $(UWEB_INC) \
		  $(NULLRENDER_SRC) $(NULLRENDER_INC)

# Backup directory.
BACKUP_DIR		= $(UNREAL_DIR)/backup

# XWindows libs.
XLIBS			= -L/usr/X11/lib -L/usr/X11R6/lib -lX11 -lXext -lXmu \
			  -lXt -lXi -lSM -lICE -lXpm

SDL_LIBS		= $(shell sdl-config --libs)
SDL_CFLAGS		= $(shell sdl-config --cflags)

#-----------------------------------------------------------------------------
# Output files.
#-----------------------------------------------------------------------------

# Core library
CORE			= $(CORE_OUT)/Core.$(LIBSUFFIX)
CORE_SONAME		= Core.so

# Engine library
ENGINE			= $(ENGINE_OUT)/Engine.$(LIBSUFFIX)
ENGINE_SONAME		= Engine.so

# IpDrv library
IPDRV			= $(IPDRV_OUT)/IpDrv.$(LIBSUFFIX)
IPDRV_SONAME		= IpDrv.so

# Fire library
FIRE			= $(FIRE_OUT)/Fire.$(LIBSUFFIX)
FIRE_SONAME		= Fire.so

# Editor library
EDITOR			= $(EDITOR_OUT)/Editor.$(LIBSUFFIX)
EDITOR_SONAME		= Editor.so

# UCC executable
UCC			= $(UCC_OUT)/ucc

# MiniLaunch executable
MINILAUNCH			= $(MINILAUNCH_OUT)/Surreal

# SDLLaunch executable
SDLLAUNCH			= $(SDLLAUNCH_OUT)/UnrealTournament

# Render library
RENDER			= $(RENDER_OUT)/Render.$(LIBSUFFIX)
RENDER_SONAME		= Render.so

# OpenGLDrv library
OPENGLDRV		= $(OPENGLDRV_OUT)/OpenGLDrv.$(LIBSUFFIX)
OPENGLDRV_SONAME	= OpenGLDrv.so

# SDLDrv library
SDLDRV			= $(SDLDRV_OUT)/SDLDrv.$(LIBSUFFIX)
SDLDRV_SONAME		= SDLDrv.so

# ALAudio library
ALAUDIO			= $(ALAUDIO_OUT)/ALAudio.$(LIBSUFFIX)
ALAUDIO_SONAME		= ALAudio.so

# UWeb library
UWEB			= $(UWEB_OUT)/UWeb.$(LIBSUFFIX)
UWEB_SONAME		= UWeb.so

# NullRender library
NULLRENDER		= $(NULLRENDER_OUT)/NullRender.$(LIBSUFFIX)
NULLRENDER_SONAME	= NullRender.so

# NullNetDriver library
NULLNETDRIVER		= $(NULLNETDRIVER_OUT)/NullNetDriver.$(LIBSUFFIX)
NULLNETDRIVER_SONAME	= NullNetDriver.so

# NullDrv library
NULLDRV			= $(NULLDRV_OUT)/NullDrv.$(LIBSUFFIX)
NULLDRV_SONAME		= NullDrv.so

#-----------------------------------------------------------------------------
# Standard compiler/linker options.
#-----------------------------------------------------------------------------

ifeq ($(TARGETTYPE),linux)
STD_CXX		= g++-2.95
STD_CXXFLAGS	= -D__LINUX__ -D__STATIC_LINK=$(STATICLINK) \
			-fno-for-scope $(BUILD_CXXFLAGS)
STD_LDFLAGS	= -Wl,-rpath,. -L$(TMPDIR)
STD_LIBS	= -lm -lrt -ldl -lnsl -lpthread

STD_AR		= ar
endif

#-----------------------------------------------------------------------------
# Tags.
#-----------------------------------------------------------------------------

CORE_TAG	= $(CORE_INC)/*.h $(CORE_SRC)/*.h $(CORE_SRC)/*.cpp
ENGINE_TAG	= $(ENGINE_INC)/*.h $(ENGINE_SRC)/*.h $(ENGINE_SRC)/*.cpp
IPDRV_TAG	= $(IPDRV_INC)/*.h $(IPDRV_SRC)/*.h $(IPDRV_SRC)/*.cpp
FIRE_TAG	= $(FIRE_INC)/*.h $(FIRE_SRC)/*.h $(FIRE_SRC)/*.cpp
EDITOR_TAG	= $(EDITOR_INC)/*.h $(EDITOR_SRC)/*.h $(EDITOR_SRC)/*.cpp
UCC_TAG		= $(UCC_INC)/*.h $(UCC_SRC)/*.h $(UCC_SRC)/*.cpp
RENDER_TAG	= $(RENDER_INC)/*.h $(RENDER_SRC)/*.h $(RENDER_SRC)/*.cpp
OPENGLDRV_TAG	= $(OPENGLDRV_INC)/*.h $(OPENGLDRV_SRC)/*.h $(OPENGLDRV_SRC)/*.cpp
SDLDRV_TAG	= $(SDLDRV_INC)/*.h $(SDLDRV_INC)/*.h $(SDLDRV_SRC)/*.cpp
MINILAUNCH_TAG	= $(MINILAUNCH_INC)/*.h $(MINILAUNCH_SRC)/*.h $(MINILAUNCH_SRC)/*.cpp
SDLLAUNCH_TAG	= $(SDLLAUNCH_INC)/*.h $(SDLLAUNCH_SRC)/*.h $(SDLLAUNCH_SRC)/*.cpp
ALAUDIO_TAG	= $(ALAUDIO_INC)/*.h $(ALAUDIO_SRC)/*.h $(ALAUDIO_SRC)/*.cpp
UWEB_TAG	= $(UWEB_INC)/*.h $(UWEB_SRC)/*.h $(UWEB_SRC)/*.cpp
NULLRENDER_TAG	= $(NULLRENDER_INC)/*.h $(NULLRENDER_SRC)/*.h $(NULLRENDER_SRC)/*.cpp
STD_TAG		= /usr/include/*.h /usr/include/sys/*.h /usr/include/arpa/*.h \
			/usr/include/netinet/*.h

ALL_TAGS	= $(CORE_TAG) $(ENGINE_TAG) $(IPDRV_TAG) $(FIRE_TAG) \
			$(EDITOR_TAG) $(UCC_TAG) $(RENDER_TAG) $(OPENGLDRV_TAG) \
			$(MINILAUNCH_TAG) $(SDLLAUNCH_TAG) $(SDLDRV_TAG) \
			$(ALAUDIO_TAG) $(UWEB_TAG) $(NULLRENDER_TAG) $(STD_TAG)

#-----------------------------------------------------------------------------
# The End.
#-----------------------------------------------------------------------------
